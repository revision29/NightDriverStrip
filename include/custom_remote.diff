diff --git a/src/remotecontrol.cpp b/src/remotecontrol.cpp
index 4c6ac370..97e79cb4 100644
--- a/src/remotecontrol.cpp
+++ b/src/remotecontrol.cpp
@@ -36,103 +36,107 @@
 
 #define BRIGHTNESS_STEP     20
 
-void RemoteControl::handle()
-{
-    decode_results results;
-    static uint lastResult = 0;
-
-    if (!_IR_Receive.decode(&results))
-        return;
+#if __has_include ("custom_remote.h")
+      #include "custom_remote.h"
+#else
+    void RemoteControl::handle()
+    {
+        decode_results results;
+        static uint lastResult = 0;
 
-    uint result = results.value;
-    _IR_Receive.resume();
+        if (!_IR_Receive.decode(&results))
+            return;
 
-    debugV("Received IR Remote Code: 0x%08X, Decode: %08X\n", result, results.decode_type);
+        uint result = results.value;
+        _IR_Receive.resume();
 
-    if (0xFFFFFFFF == result || result == lastResult)
-    {
-        static uint lastRepeatTime = millis();
+        debugV("Received IR Remote Code: 0x%08X, Decode: %08X\n", result, results.decode_type);
 
-        // Only the OFF key runs at the full unbounded speed, so you can rapidly dim.  But everything
-        // else has its repeat rate clamped here.
+        if (0xFFFFFFFF == result || result == lastResult)
+        {
+            static uint lastRepeatTime = millis();
+
+            // Only the OFF key runs at the full unbounded speed, so you can rapidly dim.  But everything
+            // else has its repeat rate clamped here.
+
+            const auto kMinRepeatms = (lastResult == IR_OFF) ? 0 : 200;
+
+            if (millis() - lastRepeatTime > kMinRepeatms)
+            {
+                debugV("Remote Repeat; lastResult == %08x, elapsed = %lu\n", lastResult, millis()-lastRepeatTime);
+                result = lastResult;
+                lastRepeatTime = millis();
+            }
+            else
+            {
+                return;
+            }
+        }
+        lastResult = result;
 
-        const auto kMinRepeatms = (lastResult == IR_OFF) ? 0 : 200;
+        auto &effectManager = g_ptrSystem->EffectManager();
+        auto &deviceConfig = g_ptrSystem->DeviceConfig();
 
-        if (millis() - lastRepeatTime > kMinRepeatms)
+        if (IR_ON == result)
         {
-            debugV("Remote Repeat; lastResult == %08x, elapsed = %lu\n", lastResult, millis()-lastRepeatTime);
-            result = lastResult;
-            lastRepeatTime = millis();
+            debugV("Turning ON via remote");
+            effectManager.ClearRemoteColor();
+            effectManager.SetInterval(0);
+            effectManager.StartEffect();
+            deviceConfig.SetBrightness(BRIGHTNESS_MAX);
+            return;
         }
-        else
+        else if (IR_OFF == result)
         {
+            deviceConfig.SetBrightness((int)deviceConfig.GetBrightness() - BRIGHTNESS_STEP);
             return;
         }
-    }
-    lastResult = result;
-
-    auto &effectManager = g_ptrSystem->EffectManager();
-    auto &deviceConfig = g_ptrSystem->DeviceConfig();
-
-    if (IR_ON == result)
-    {
-        debugV("Turning ON via remote");
-        effectManager.ClearRemoteColor();
-        effectManager.SetInterval(0);
-        effectManager.StartEffect();
-        deviceConfig.SetBrightness(BRIGHTNESS_MAX);
-        return;
-    }
-    else if (IR_OFF == result)
-    {
-        deviceConfig.SetBrightness((int)deviceConfig.GetBrightness() - BRIGHTNESS_STEP);
-        return;
-    }
-    else if (IR_BPLUS == result)
-    {
-        if (deviceConfig.ApplyGlobalColors())
-            effectManager.ClearRemoteColor();
-        else
-            effectManager.NextEffect();
-        
-        return;
-    }
-    else if (IR_BMINUS == result)
-    {
-        if (deviceConfig.ApplyGlobalColors())
+        else if (IR_BPLUS == result)
+        {
+            if (deviceConfig.ApplyGlobalColors())
+                effectManager.ClearRemoteColor();
+            else
+                effectManager.NextEffect();
+            
+            return;
+        }
+        else if (IR_BMINUS == result)
+        {
+            if (deviceConfig.ApplyGlobalColors())
+                effectManager.ClearRemoteColor();
+            else
+                effectManager.PreviousEffect();
+            
+            return;
+        }
+        else if (IR_SMOOTH == result)
+        {
             effectManager.ClearRemoteColor();
-        else
-            effectManager.PreviousEffect();
-        
-        return;
-    }
-    else if (IR_SMOOTH == result)
-    {
-        effectManager.ClearRemoteColor();
-        effectManager.SetInterval(EffectManager::csSmoothButtonSpeed);
-    }
-    else if (IR_STROBE == result)
-    {
-        effectManager.NextPalette();
-    }
-    else if (IR_FLASH == result)
-    {
-        effectManager.PreviousPalette();
-    }
-    else if (IR_FADE == result)
-    {
-        effectManager.ShowVU( !effectManager.IsVUVisible() );
-    }
+            effectManager.SetInterval(EffectManager::csSmoothButtonSpeed);
+        }
+        else if (IR_STROBE == result)
+        {
+            effectManager.NextPalette();
+        }
+        else if (IR_FLASH == result)
+        {
+            effectManager.PreviousPalette();
+        }
+        else if (IR_FADE == result)
+        {
+            effectManager.ShowVU( !effectManager.IsVUVisible() );
+        }
 
-    for (int i = 0; i < ARRAYSIZE(RemoteColorCodes); i++)
-    {
-        if (RemoteColorCodes[i].code == result)
+        for (int i = 0; i < ARRAYSIZE(RemoteColorCodes); i++)
         {
-            debugV("Changing Color via remote: %08X\n", (uint) RemoteColorCodes[i].color);
-            effectManager.ApplyGlobalColor(RemoteColorCodes[i].color);
-            return;
+            if (RemoteColorCodes[i].code == result)
+            {
+                debugV("Changing Color via remote: %08X\n", (uint) RemoteColorCodes[i].color);
+                effectManager.ApplyGlobalColor(RemoteColorCodes[i].color);
+                return;
+            }
         }
     }
-}
+#endif
 
 #endif
\ No newline at end of file
